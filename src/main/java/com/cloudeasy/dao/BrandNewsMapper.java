package com.cloudeasy.dao;

import java.util.List;

import com.cloudeasy.dto.BaseDTO;
import com.cloudeasy.model.Brand;
import com.cloudeasy.model.BrandNews;
import com.cloudeasy.model.News;
import com.cloudeasy.mybatis.DynamicDBValues;

public interface BrandNewsMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table brand_news_tbl
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table brand_news_tbl
     *
     * @mbggenerated
     */
    int insert(BrandNews record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table brand_news_tbl
     *
     * @mbggenerated
     */
    int insertSelective(BrandNews record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table brand_news_tbl
     *
     * @mbggenerated
     */
    BrandNews selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table brand_news_tbl
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(BrandNews record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table brand_news_tbl
     *
     * @mbggenerated
     */
    int updateByPrimaryKeyWithBLOBs(BrandNews record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table brand_news_tbl
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(BrandNews record);
    

	/**
     * 总条数
     * @param model
     * @return int
     */
    public int queryByCount(BaseDTO model);

    /**
     * 名称是否存在
     * @param model
     * @return
     */
    public int isBrandName(BaseDTO model);
    
    
	List<BrandNews> queryByList(BaseDTO model);
	
	/**
	 * 根据品牌获取对应新闻
	 */
	List<BrandNews> getBrandNewsListByBrandId(BaseDTO model);
	
	public int findByCountByBrandId(BaseDTO model);
	
	public List<BrandNews> findByListByBrandId(BaseDTO model);
	
	List<BrandNews> frontNewsBySeq(DynamicDBValues dy);
	
	public Integer frontCountByBrandId(DynamicDBValues dy);
	
}